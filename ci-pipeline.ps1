# =============================================================================
# Script CI/CD pour BoutiqueProd - Symfony 6.1 (PowerShell)
# =============================================================================
# Ce script automatise :
# 1Ô∏è‚É£ Les tests automatis√©s (PHPUnit)
# 2Ô∏è‚É£ L'analyse de qualit√© de code (PHPStan, PHP CS Fixer)
# 3Ô∏è‚É£ La cr√©ation du livrable (build/archive)
# =============================================================================

param(
    [string]$Version = (Get-Date -Format "yyyyMMdd-HHmmss"),
    [string]$ProjectName = "BoutiqueProd",
    [switch]$SkipTests = $false,
    [switch]$SkipQuality = $false,
    [switch]$SkipBuild = $false
)

# Configuration
$BuildDir = "build"
$ReportsDir = "reports"
$CoverageDir = "coverage"
$ArchiveName = "$ProjectName-$Version.zip"

# Fonctions utilitaires
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Fonction pour v√©rifier les pr√©requis
function Test-Prerequisites {
    Write-Info "V√©rification des pr√©requis..."
    
    # V√©rifier PHP
    try {
        $phpVersion = php -r "echo PHP_VERSION;"
        Write-Info "Version PHP d√©tect√©e: $phpVersion"
        
        # V√©rifier la version PHP
        $phpVersionCheck = php -r "exit(version_compare(PHP_VERSION, '8.1.0', '>=') ? 0 : 1);"
        if ($LASTEXITCODE -ne 0) {
            Write-Error "PHP 8.1+ requis, version actuelle: $phpVersion"
            exit 1
        }
    }
    catch {
        Write-Error "PHP n'est pas install√© ou n'est pas dans le PATH"
        exit 1
    }
    
    # V√©rifier Composer
    try {
        composer --version | Out-Null
    }
    catch {
        Write-Error "Composer n'est pas install√© ou n'est pas dans le PATH"
        exit 1
    }
    
    Write-Success "Pr√©requis v√©rifi√©s avec succ√®s"
}

# Fonction pour installer les d√©pendances
function Install-Dependencies {
    Write-Info "Installation des d√©pendances..."
    
    # Installer les d√©pendances de production
    composer install --no-dev --optimize-autoloader --no-interaction
    
    # Installer les d√©pendances de d√©veloppement
    composer install --dev --no-interaction
    
    Write-Success "D√©pendances install√©es avec succ√®s"
}

# Fonction pour nettoyer le cache
function Clear-Cache {
    Write-Info "Nettoyage du cache..."
    
    # Nettoyer le cache Symfony
    php bin/console cache:clear --env=test --no-debug
    php bin/console cache:clear --env=prod --no-debug
    
    Write-Success "Cache nettoy√© avec succ√®s"
}

# Fonction pour ex√©cuter les tests
function Invoke-Tests {
    if ($SkipTests) {
        Write-Warning "Tests ignor√©s (param√®tre -SkipTests)"
        return
    }
    
    Write-Info "üöÄ Ex√©cution des tests automatis√©s..."
    
    # Cr√©er le dossier des rapports
    if (!(Test-Path $ReportsDir)) {
        New-Item -ItemType Directory -Path $ReportsDir | Out-Null
    }
    
    # Ex√©cuter les tests avec couverture
    Write-Info "Ex√©cution des tests PHPUnit avec couverture de code..."
    
    $testResult = php bin/phpunit --coverage-html="$CoverageDir" --coverage-clover="$ReportsDir\coverage.xml" --log-junit="$ReportsDir\junit.xml" --verbose
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Tests ex√©cut√©s avec succ√®s"
    }
    else {
        Write-Error "√âchec des tests"
        exit 1
    }
    
    # Analyser le rapport JUnit
    if (Test-Path "$ReportsDir\junit.xml") {
        $junitContent = Get-Content "$ReportsDir\junit.xml" -Raw
        $testsMatch = [regex]::Match($junitContent, 'tests="(\d+)"')
        $failuresMatch = [regex]::Match($junitContent, 'failures="(\d+)"')
        $errorsMatch = [regex]::Match($junitContent, 'errors="(\d+)"')
        
        $tests = if ($testsMatch.Success) { $testsMatch.Groups[1].Value } else { "0" }
        $failures = if ($failuresMatch.Success) { $failuresMatch.Groups[1].Value } else { "0" }
        $errors = if ($errorsMatch.Success) { $errorsMatch.Groups[1].Value } else { "0" }
        
        Write-Info "R√©sum√© des tests:"
        Write-Info "  - Tests ex√©cut√©s: $tests"
        Write-Info "  - √âchecs: $failures"
        Write-Info "  - Erreurs: $errors"
        
        if ([int]$failures -gt 0 -or [int]$errors -gt 0) {
            Write-Error "Des tests ont √©chou√©"
            exit 1
        }
    }
}

# Fonction pour l'analyse de qualit√© de code
function Invoke-CodeQuality {
    if ($SkipQuality) {
        Write-Warning "Analyse de qualit√© ignor√©e (param√®tre -SkipQuality)"
        return
    }
    
    Write-Info "üîç Analyse de qualit√© de code..."
    
    # Installer PHPStan si n√©cessaire
    $phpstanInstalled = composer show phpstan/phpstan 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Info "Installation de PHPStan..."
        composer require --dev phpstan/phpstan --no-interaction
    }
    
    # Installer PHP CS Fixer si n√©cessaire
    $csFixerInstalled = composer show friendsofphp/php-cs-fixer 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Info "Installation de PHP CS Fixer..."
        composer require --dev friendsofphp/php-cs-fixer --no-interaction
    }
    
    # Cr√©er la configuration PHPStan si elle n'existe pas
    if (!(Test-Path "phpstan.neon")) {
        Write-Info "Cr√©ation de la configuration PHPStan..."
        $phpstanConfig = @"
parameters:
    level: 6
    paths:
        - src
    excludePaths:
        - src/Migrations
    ignoreErrors:
        - '#Call to an undefined method#'
    checkMissingIterableValueType: false
"@
        $phpstanConfig | Out-File -FilePath "phpstan.neon" -Encoding UTF8
    }
    
    # Cr√©er la configuration PHP CS Fixer si elle n'existe pas
    if (!(Test-Path ".php-cs-fixer.php")) {
        Write-Info "Cr√©ation de la configuration PHP CS Fixer..."
        $csFixerConfig = @'
<?php

$finder = PhpCsFixer\Finder::create()
    ->in(__DIR__)
    ->exclude('vendor')
    ->exclude('var')
    ->exclude('public')
    ->exclude('node_modules')
    ->name('*.php');

$config = new PhpCsFixer\Config();
return $config
    ->setRules([
        '@PSR12' => true,
        'array_syntax' => ['syntax' => 'short'],
        'ordered_imports' => ['sort_algorithm' => 'alpha'],
        'no_unused_imports' => true,
        'not_operator_with_successor_space' => true,
        'trailing_comma_in_multiline' => true,
        'phpdoc_scalar' => true,
        'unary_operator_spaces' => true,
        'binary_operator_spaces' => true,
        'blank_line_before_statement' => [
            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],
        ],
        'phpdoc_single_line_var_spacing' => true,
        'phpdoc_var_without_name' => true,
        'method_argument_space' => [
            'on_multiline' => 'ensure_fully_multiline',
            'keep_multiple_spaces_after_comma' => true,
        ],
    ])
    ->setFinder($finder);
'@
        $csFixerConfig | Out-File -FilePath ".php-cs-fixer.php" -Encoding UTF8
    }
    
    # Ex√©cuter PHP CS Fixer (dry-run)
    Write-Info "V√©rification du style de code avec PHP CS Fixer..."
    $csFixerResult = vendor\bin\php-cs-fixer fix --dry-run --diff --verbose
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Style de code conforme"
    }
    else {
        Write-Warning "Probl√®mes de style de code d√©tect√©s"
        Write-Info "Ex√©cution de la correction automatique..."
        vendor\bin\php-cs-fixer fix --verbose
        Write-Success "Style de code corrig√©"
    }
    
    # Ex√©cuter PHPStan
    Write-Info "Analyse statique avec PHPStan..."
    $phpstanResult = vendor\bin\phpstan analyse --memory-limit=1G
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Analyse statique r√©ussie"
    }
    else {
        Write-Error "Probl√®mes d√©tect√©s par PHPStan"
        exit 1
    }
    
    # G√©n√©rer le rapport de qualit√©
    Write-Info "G√©n√©ration du rapport de qualit√©..."
    $qualityReport = @"
# Rapport de Qualit√© de Code - $ProjectName

**Date:** $(Get-Date)
**Version:** $Version

## R√©sum√©

- ‚úÖ Tests unitaires: Pass√©s
- ‚úÖ Style de code: Conforme
- ‚úÖ Analyse statique: R√©ussie

## D√©tails

### Tests
- Couverture de code: Disponible dans ``$CoverageDir\``
- Rapport JUnit: ``$ReportsDir\junit.xml``
- Rapport de couverture: ``$ReportsDir\coverage.xml``

### Qualit√© de code
- PHPStan: Niveau 6 (strict)
- PHP CS Fixer: PSR-12
- Aucun probl√®me d√©tect√©

## Recommandations

- Maintenir la couverture de code au-dessus de 80%
- Ex√©cuter ce pipeline avant chaque d√©ploiement
- R√©viser les rapports de couverture r√©guli√®rement
"@
    $qualityReport | Out-File -FilePath "$ReportsDir\quality-report.md" -Encoding UTF8
    
    Write-Success "Analyse de qualit√© termin√©e"
}

# Fonction pour cr√©er le livrable
function New-Build {
    if ($SkipBuild) {
        Write-Warning "Cr√©ation du livrable ignor√©e (param√®tre -SkipBuild)"
        return
    }
    
    Write-Info "üì¶ Cr√©ation du livrable..."
    
    # Cr√©er le dossier de build
    if (!(Test-Path $BuildDir)) {
        New-Item -ItemType Directory -Path $BuildDir | Out-Null
    }
    
    # Nettoyer le cache de production
    php bin/console cache:clear --env=prod --no-debug
    
    # Optimiser l'autoloader
    composer dump-autoload --optimize --no-dev
    
    # Cr√©er l'archive
    Write-Info "Cr√©ation de l'archive: $ArchiveName"
    
    # Cr√©er une archive ZIP
    $excludePatterns = @(
        ".git",
        ".env.local",
        ".env.test",
        "var\cache",
        "var\log",
        "node_modules",
        "tests",
        "phpunit.xml.dist",
        ".php-cs-fixer.php",
        "phpstan.neon",
        "vendor",
        "build",
        "reports",
        "coverage"
    )
    
    # Obtenir tous les fichiers √† inclure
    $filesToInclude = Get-ChildItem -Path . -Recurse | Where-Object {
        $exclude = $false
        foreach ($pattern in $excludePatterns) {
            if ($_.FullName -like "*\$pattern*") {
                $exclude = $true
                break
            }
        }
        return !$exclude
    }
    
    # Cr√©er l'archive ZIP
    Compress-Archive -Path $filesToInclude.FullName -DestinationPath "$BuildDir\$ArchiveName" -Force
    
    # Calculer la taille de l'archive
    $archiveSize = (Get-Item "$BuildDir\$ArchiveName").Length
    $archiveSizeFormatted = "{0:N2} MB" -f ($archiveSize / 1MB)
    
    # Cr√©er un fichier de manifest
    $manifest = @"
BoutiqueProd - Manifest de Build
================================

Version: $Version
Date de build: $(Get-Date)
Taille de l'archive: $archiveSizeFormatted

Contenu inclus:
- Code source de l'application
- Configuration de production
- Assets publics
- Migrations de base de donn√©es
- Documentation

Contenu exclu:
- Tests unitaires
- Outils de d√©veloppement
- Cache et logs
- Fichiers de configuration locale

Installation:
1. Extraire l'archive sur le serveur
2. Installer les d√©pendances: composer install --no-dev --optimize-autoloader
3. Configurer la base de donn√©es
4. Ex√©cuter les migrations: php bin/console doctrine:migrations:migrate
5. Configurer le serveur web

Support:
- Documentation: README.md
- API: /api/doc
- Logs: var/log/
"@
    $manifest | Out-File -FilePath "$BuildDir\MANIFEST.txt" -Encoding UTF8
    
    Write-Success "Livrable cr√©√©: $BuildDir\$ArchiveName ($archiveSizeFormatted)"
}

# Fonction pour g√©n√©rer le rapport final
function New-FinalReport {
    Write-Info "üìä G√©n√©ration du rapport final..."
    
    $archiveSize = if (Test-Path "$BuildDir\$ArchiveName") { 
        "{0:N2} MB" -f ((Get-Item "$BuildDir\$ArchiveName").Length / 1MB) 
    } else { "N/A" }
    
    $finalReport = @"
# Rapport CI/CD - $ProjectName

**Date:** $(Get-Date)
**Version:** $Version
**Statut:** ‚úÖ SUCC√àS

## R√©sum√© des √©tapes

### 1Ô∏è‚É£ Tests automatis√©s
- ‚úÖ PHPUnit: Tous les tests pass√©s
- ‚úÖ Couverture de code: G√©n√©r√©e
- ‚úÖ Rapports: JUnit et Clover

### 2Ô∏è‚É£ Analyse de qualit√©
- ‚úÖ PHPStan: Analyse statique r√©ussie
- ‚úÖ PHP CS Fixer: Style de code conforme
- ‚úÖ Aucun probl√®me d√©tect√©

### 3Ô∏è‚É£ Cr√©ation du livrable
- ‚úÖ Archive cr√©√©e: ``$ArchiveName``
- ‚úÖ Taille: $archiveSize
- ‚úÖ Manifest g√©n√©r√©

## Fichiers g√©n√©r√©s

- **Archive:** ``$BuildDir\$ArchiveName``
- **Manifest:** ``$BuildDir\MANIFEST.txt``
- **Rapport de qualit√©:** ``$ReportsDir\quality-report.md``
- **Couverture de code:** ``$CoverageDir\``
- **Rapport JUnit:** ``$ReportsDir\junit.xml``

## Prochaines √©tapes

1. Tester l'archive sur un environnement de staging
2. D√©ployer en production
3. Surveiller les logs et m√©triques

---
*G√©n√©r√© automatiquement par le pipeline CI/CD*
"@
    $finalReport | Out-File -FilePath "$ReportsDir\ci-report.md" -Encoding UTF8
    
    Write-Success "Rapport final g√©n√©r√©: $ReportsDir\ci-report.md"
}

# Fonction principale
function Main {
    Write-Info "üöÄ D√©marrage du pipeline CI/CD pour $ProjectName"
    Write-Info "Version: $Version"
    Write-Host "=================================================="
    
    try {
        # √âtapes du pipeline
        Test-Prerequisites
        Install-Dependencies
        Clear-Cache
        Invoke-Tests
        Invoke-CodeQuality
        New-Build
        New-FinalReport
        
        Write-Host "=================================================="
        Write-Success "üéâ Pipeline CI/CD termin√© avec succ√®s!"
        Write-Info "Archive cr√©√©e: $BuildDir\$ArchiveName"
        Write-Info "Rapport disponible: $ReportsDir\ci-report.md"
        Write-Info "Couverture de code: $CoverageDir\index.html"
    }
    catch {
        Write-Error "Pipeline interrompu par une erreur: $($_.Exception.Message)"
        exit 1
    }
}

# Ex√©cution du script
Main

